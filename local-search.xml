<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用vscode进行go语言开发</title>
    <link href="/2023/01/30/vscodego/"/>
    <url>/2023/01/30/vscodego/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>vscode作为开发人员最常用的文本编辑器来说，兼备了许多功能，例如代码补全，调试等功能，并且带有丰富的插件仓库可以让我们拓展vscode的能力。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>如果要搭建开发环境，你需要满足下列的条件：</p><ul><li>安装了vscode</li><li>安装了go</li><li>下载go-vscode的拓展</li></ul><h1 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h1><p>安装vscode很简单，我们只需要前往vscode的官网进行下载即可。</p><h1 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h1><p>这里我使用的是OpenSUSE，其他的发行版安装go的操作也是大差不差的。我们只需要在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install go<br></code></pre></td></tr></table></figure><p>就可以了。随后，我们使用<code>go version</code>来确保我们已经正确的安装了go。如果一切正常的话，那么你应该会看到下列信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxx@xxx:~&gt; go version<br>go version go1.17.9 linux/amd64<br></code></pre></td></tr></table></figure><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>我们首先要执行一些基础操作。同样的打开你的终端，输入下列命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">go env -w GO111MODULE=on         #Golang1.16默认开启,1.16一下需要执行这条命令<br>go env -w  GOPROXY=https://goproxy.cn,direct     #设置七牛CDN<br></code></pre></td></tr></table></figure><p>随后，我们需要指定go的路径。我们可以通过<code>whereis go</code>来快速找到go的安装目录。随后我们需要执行下面的这条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go  env -w GOBIN=/usr/lib64/go/1.17#此处根据自身进行修改<br></code></pre></td></tr></table></figure><p>在执行完毕后，我们需要使用<code>go env</code>来进行验证。如果输出的<code>GOBIN</code>正确的话，就像下面的那样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GOBIN=&quot;/usr/lib64/go/1.17&quot;<br></code></pre></td></tr></table></figure><p>那么恭喜你，成功了。设置好环境变量之后，vscode下载的插件也会存放到此处。</p><h1 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在启动vscode后，我们点击右侧的<strong>插件</strong>按钮，随后搜索<strong>go</strong>，选择第一个也就是下载最多的插件，安装即可。</p><h2 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h2><p>随后我们按住<code>Ctrl+Shift+P</code>输入<code>Go:Install/Update Tools</code>，全选插件，等待插件更新即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Go</category>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>编程</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo提交后CNAME被删除自定义域名失效的问题</title>
    <link href="/2023/01/29/cname/"/>
    <url>/2023/01/29/cname/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么不会提交"><a href="#为什么不会提交" class="headerlink" title="为什么不会提交"></a>为什么不会提交</h1><p>根据官方的解释：当执行<code>hexo deploy</code>时，Hexo会将<code>public</code>目录中的文件和目录推送至<code>_config.yml</code>中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。所以如果你的<code>CNAME</code>文件放在根目录时，不仅不会被提交，还会<strong>覆盖分支</strong></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方案很简单，你需要把你的<code>CNAME</code>放到<code>source</code>文件夹即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>问题解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在OpenSUSE下面游玩炉石传说</title>
    <link href="/2023/01/29/battlelinux/"/>
    <url>/2023/01/29/battlelinux/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>炉石传说应该是世界上最受欢迎的卡牌游戏，但是暴雪没有专门为Linux平台适配。好在这是一款轻量型的游戏，通过工具可以让我们在Linux平台畅玩。</p><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><ul><li>Wine</li><li>Wine-Staging</li><li>暴雪客户端</li></ul><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>首先我们需要安装<code>wine</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install wine<br></code></pre></td></tr></table></figure><p>在安装好<code>wine</code>之后，我们还需要再安装一个补丁，叫做<code>wine-staging</code>。这个补丁的安装也很简单，我们可以使用<code>opi</code>这个工具来进行检索与安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install opi<br></code></pre></td></tr></table></figure><p>在安装好<code>opi</code>包管理工具后，我们只需要键入<code>opi wine-staging</code>就可以了。如果你成功执行，那么你会看到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">yourname@yourpc:~&gt; opi wine-staging<br> 1. wine-staging<br> 2. wine-staging-32bit<br> 3. wine-staging-devel<br> 4. wine-staging-debuginfo<br> 5. wine-staging-debugsource<br> 6. wine-staging-devel-32bit<br> 7. wine-staging-32bit-debuginfo<br> 8. wine-staging-devel-debuginfo<br> 9. wine-staging-32bit-build-deps<br>10. wine-staging-devel-32bit-debuginfo<br>Pick a number (0 to quit):<br></code></pre></td></tr></table></figure><p>这时候我们可以通过输入数字<code>1</code>来进行安装。在输入完成后你会看到下面的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">You have selected package name: wine-staging<br>1. Emulators ?                               | 8.0                       | x86_64<br>2. Emulators:Wine ?                          | 8.0                       | x86_64<br>3. home:darkhado:openSUSE !                  | 7.6                       | x86_64<br>4. home:mnhauke:ISDN !                       | 8.0                       | x86_64<br>5. home:txutxifel !                          | 7.2                       | x86_64<br>6. home:chris144 !                           | 7.0                       | x86_64<br>Pick a number (0 to quit):<br></code></pre></td></tr></table></figure><p>这段信息的意思是选择安装源，这里你会发现前面两个是绿色的，为了方便区分，这里的<strong>绿色代表官方源</strong>。所以这里选择<code>1</code>或者<code>2</code>都没问题。如果一切正常的话，你会遇到如下的报错信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">问题： 安装的 wine-7.0-bp154.1.62.x86_64 与要安装的 wine-staging-8.0-lp154.985.1.x86_64 所提供的 &quot;namespace:otherproviders(wine)&quot; 冲突<br> 解决方案 1： 将执行以下动作：<br>  卸载 wine-7.0-bp154.1.62.x86_64<br>  卸载 wine-gecko-2.47.2-bp154.1.19.noarch<br>  卸载 wine-32bit-7.0-bp154.1.62.x86_64<br> 解决方案 2： 不安装 wine-staging-8.0-lp154.985.1.x86_64<br><br>请通过数字从以上解决方案中选择，或取消 [1/2/c/d/?] (c):<br></code></pre></td></tr></table></figure><p>这是因为我们的补丁<code>wine-staging</code>与现有的<code>wine</code>版本有冲突，我们直接卸载即可，也就是输入<code>1</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">正在解决依赖关系...<br>正在解决软件包依赖关系...<br><br>将升级以下 1 个软件包：<br>  wine-mono<br><br>将改变以下 1 个软件包的厂商：<br>  wine-mono  openSUSE -&gt; obs://build.opensuse.org/Emulators<br><br>将安装以下 2 个新软件包：<br>  wine-staging wine-staging-32bit<br><br>将移除以下 3 个软件包：<br>  wine wine-32bit wine-gecko<br><br>1 个软件包待升级, 2 个软件包将新装, 3 个软件包将移除, 1 个软件包将改变厂商.<br>总下载大小：110.2 MiB。已缓存：0 B。 操作完成后，将释放 249.9 MiB。<br>继续吗？ [y/n/v/...? 显示全部选项] (y):<br></code></pre></td></tr></table></figure><p>这一步是询问你是否进行下一步操作，我们键入<code>y</code>，等待安装进程结束后，你会遇到如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">某些运行中的程序仍在使用被最近升级所删除或更新的文件和函数库。应重启它们使其也能从最新更新中获益。运行 ‘zypper ps -s’ 列出这些程序。<br><br>Do you want to keep the repo &quot;Emulators&quot;? (Y/n)<br></code></pre></td></tr></table></figure><p>这段文字是询问你是否保留该仓库，我们这里为了日后的更新，所以选择<code>y</code>。</p><h1 id="配置Wine"><a href="#配置Wine" class="headerlink" title="配置Wine"></a>配置Wine</h1><p>在安装好<code>wine</code>之后，你需要在终端里面输入<code>winecfg</code>来启动<code>wine</code>的图形化配置窗口。随后，我们需要切换到<code>函数库</code>选项卡，并在<code>新增函数库顶替</code>处，新增这两个函数<code>d3d11</code>和<code>locationapi</code>，新增完成后，并点击<code>编辑</code>，把它们禁用。</p><h1 id="安装Winetricks"><a href="#安装Winetricks" class="headerlink" title="安装Winetricks"></a>安装Winetricks</h1><p>在设置好前置环境后，我们还需要安装<code>Winetricks</code>来下载所需的<code>Windows组件</code><del>（Windwos真的好恶心）</del>。同理，我们使用<code>opi</code>来快速安装：<code>opi winetricks</code>，回车后你会看见多个版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">yourname@yourpc:~&gt; opi winetricks<br>1. winetricks<br>2. winetricks-zh<br>3. winetricks-gcs<br></code></pre></td></tr></table></figure><p>这里为了方便我们理解，选择<code>winetricks-zh</code>就可以了，下面的操作就与之前的如出一辙。</p><h1 id="配置Wnetricks"><a href="#配置Wnetricks" class="headerlink" title="配置Wnetricks"></a>配置Wnetricks</h1><p>安装好之后，我们需要进行最后的配置。我们只需要在命令行中输入<code>winetricks</code>即可。初次使用会遇到很多的选择项，我们的保持<strong>默认</strong>，随后我们会看到一个包含安装Windows组件的窗口。这里我们选择<code>安装Windows组件</code>，随后一直向下找，找到<code>IE8</code>，我们选择之后，点击确定。安装完成后，我们还需要安装字体。我们只需要把上一步操作换成<code>安装字体</code>就可以了。在选择字体界面，我们选择<code>cordfonts</code>即可。</p><h1 id="开始游玩"><a href="#开始游玩" class="headerlink" title="开始游玩"></a>开始游玩</h1><p>下一步就是去暴雪官网下载战网客户端，这一步操作与Windows平台一样，使用Wine运行安装程序后慢慢跟着流程操作就可以了。登录完成之后，找到炉石传说点击下载按钮就可以进行安装了。其他的游戏你也可以尝试去安装一下，理论来说是可以完美运行的。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>游戏</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>游戏</tag>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>炉石传说，再见</title>
    <link href="/2023/01/28/battlenet/"/>
    <url>/2023/01/28/battlenet/</url>
    
    <content type="html"><![CDATA[<h1 id="说声再见"><a href="#说声再见" class="headerlink" title="说声再见"></a>说声再见</h1><blockquote><p><strong>相逢一场终有散。谢谢陪伴。</strong></p></blockquote><p>2014.3.13，炉石传说正式服上线。2018年7月，我第一次接触到了炉石传说。多多少少也算是个老玩家了，从砰砰计划的实验室到现在死亡骑士重新归来，五年的历程，突然之间的分别，我想换成是你你或许也无法接受。从2014年开服，到现在已经快十年了，随着合约的到期，网易也在1月24日关闭了服务器的连接，我们或许再也无法听到旅店老板的那句：”旅店永远都会开着”，或许再也无法像从前那样，翻看收藏到半夜。无论你是旅店的常客，还是刚来入住的新手，想必在那天都心怀不舍。</p><p>你或许已经放下一切，回归生活，或许转战其他服务器开启新的旅程。让我们最后一次擦亮炉石，擦亮我们青春中不朽的记忆。</p><h1 id="相伴十四年，热搜上都是我们的青春"><a href="#相伴十四年，热搜上都是我们的青春" class="headerlink" title="相伴十四年，热搜上都是我们的青春"></a>相伴十四年，热搜上都是我们的青春</h1><blockquote><p><strong>愿风指引我们的道路，愿星辰照亮我们前进的方向。</strong></p></blockquote><p>回顾历史，网易和暴雪的合作长达14年之久。在1月23日，关服前夕，暴雪停服的消息就已经登上热搜。我知道这难以接受，但仍心存侥幸打开我的战网，登录我最喜欢的游戏，在群里吹吹水。我知道那是最后一次，我知道以后可能没有机会再来旅店看看。</p><h1 id="让梦再多做一会"><a href="#让梦再多做一会" class="headerlink" title="让梦再多做一会"></a>让梦再多做一会</h1><blockquote><p><strong>再见，只为再见</strong></p></blockquote><p>你可能已经放下幻想，洗洗脸看看逝去的青春，开启新的征程，也可能让梦带着你飞去远方。人生是一场不再重逢的遇见，相逢就是，为了别离。感触着纸笔间的余温，记录下万千不能忘的昨日。在学习双手如何不再颤栗，在寻觅勇敢和坚强的真谛。时光总能消磨忧郁，晴天也会如期而至。弯弯月色不为谁而来，阴晴圆缺也都是注定。</p><p>是时候说声再见了，常回来看看，旅店永远都会开着。</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>回忆录</tag>
      
      <tag>炉石传说</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPG加密体系入门教程</title>
    <link href="/2023/01/28/gnupg/"/>
    <url>/2023/01/28/gnupg/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是GPG？"><a href="#什么是GPG？" class="headerlink" title="什么是GPG？"></a>什么是GPG？</h1><p>GPG的前身是1991年程序员 Phil Zimmermann 为了避开政府的监视而发明的<strong>加密软件PGP</strong>。。但是，它是商业软件，<em>不能自由使用</em>。所以，自由软件基金会决定，开发一个PGP的替代品，取名为<strong>GnuPG</strong>。这就是GPG的由来。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>由于我使用的是 OpenSUSE ，所以直接使用 zypper 安装了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install gpg<br></code></pre></td></tr></table></figure><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>在安装完成后，请在你的终端里键入<code>gpg --help</code>，如果能显示一大串的信息，那么代表你已经安装成功了。</p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>在上面的<code>gpg --help</code>中，提示我们可以使用<code>--gen-key</code>语法，可以生成密钥。不过在新版本的 GnuPG 中，我们通常使用<code>gpg2 --full-generate-key</code>来生成密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg2 --full-generate-key<br></code></pre></td></tr></table></figure><p>回车后你看到如下信息：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript">gpg (GnuPG) <span class="hljs-number">2.2</span><span class="hljs-number">.27</span>; Copyright (C) <span class="hljs-number">2021</span> Free Software Foundation, Inc.<br>This <span class="hljs-keyword">is</span> free software: you are free <span class="hljs-keyword">to</span> change <span class="hljs-keyword">and</span> redistribute <span class="hljs-keyword">it</span>.<br>There <span class="hljs-keyword">is</span> NO WARRANTY, <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> extent permitted <span class="hljs-keyword">by</span> law.<br><br>请选择您要使用的密钥类型：<br>   (<span class="hljs-number">1</span>) RSA 和 RSA （默认）<br>   (<span class="hljs-number">2</span>) DSA 和 Elgamal<br>   (<span class="hljs-number">3</span>) DSA（仅用于签名）<br>   (<span class="hljs-number">4</span>) RSA（仅用于签名）<br>  (<span class="hljs-number">14</span>) Existing key <span class="hljs-keyword">from</span> card<br>您的选择是？<br></code></pre></td></tr></table></figure><p>这里我们选择第一项，也就是**(1) RSA 和 RSA （默认）**。随后会打印如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">RSA</span> <span class="hljs-string">密钥的长度应在</span> <span class="hljs-number">1024</span> <span class="hljs-string">位与</span> <span class="hljs-number">4096</span> <span class="hljs-string">位之间。</span><br><span class="hljs-string">您想要使用的密钥长度？(3072)</span><br></code></pre></td></tr></table></figure><p><strong>提示：密钥长度越长越安全！</strong>，这里的默认数值是<em>3072</em>，如果你想要更加的安全可以使用更长的4096，直接输入数值即可。随后，你会看到选择有效期：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs excel">请设定这个密钥的有效期限。<br>         <span class="hljs-number">0</span> = 密钥永不过期<br>      &lt;<span class="hljs-built_in">n</span>&gt;  = 密钥在 <span class="hljs-built_in">n</span> 天后过期<br>      &lt;<span class="hljs-built_in">n</span>&gt;w = 密钥在 <span class="hljs-built_in">n</span> 周后过期<br>      &lt;<span class="hljs-built_in">n</span>&gt;m = 密钥在 <span class="hljs-built_in">n</span> 月后过期<br>      &lt;<span class="hljs-built_in">n</span>&gt;y = 密钥在 <span class="hljs-built_in">n</span> 年后过期<br>密钥的有效期限是？(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>如果密钥只是个人使用，并且你很确定可以有效保管私钥，建议选择第一个选项，即永不过期。<strong>注意，如果想设置在2年后过期，那么应该输入2y</strong>,然后回车回答完上面三个问题以后，系统让你确认。随后就是输入一些有关个人的信息。</p><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><p>在弹出的对话框中输入你想要设置的密码，这里推荐使用<strong>高强度</strong>并且<strong>不容易被人猜测到</strong>的密码，来确保安全性。<strong>到此为止，我们已经完成了生成公钥和私钥的任务了</strong>,文件在一般在&#x2F;home&#x2F;users&#x2F;.gnupg&#x2F;pubring.gpg。</p><h1 id="查看密钥列表"><a href="#查看密钥列表" class="headerlink" title="查看密钥列表"></a>查看密钥列表</h1><p>通过<code>list-keys</code>参数列出系统中已有的密钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --list-keys<br></code></pre></td></tr></table></figure><p>回车后：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">/home/users/.gnupg/pubring.kbx<br>--------------------------------<br>pub   rsa4096 2023-01-27 [SC]<br>      XXX<br>uid           [ 绝对 ] you name &lt;you email&gt;<br>sub   rsa4096 2023-01-27 [E]<br></code></pre></td></tr></table></figure><p>第一行显示公钥文件名（pubring.gpg），第二行显示公钥特征（4096位，Hash字符串和生成时间），第三行显示”用户ID”，第四行显示私钥特征。</p><h2 id="输出密钥"><a href="#输出密钥" class="headerlink" title="输出密钥"></a>输出密钥</h2><p>公钥文件（.gnupg&#x2F;pubring.gpg）以二进制形式储存，<code>armor</code>参数可以将其转换为ASCII码显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --armor --output public-key.txt --export [用户ID]<br></code></pre></td></tr></table></figure><p>“用户ID”指定哪个用户的公钥，output参数指定输出文件名（public-key.txt）。类似地，<code>export-secret-keys</code>参数可以转换私钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --armor --output private-key.txt --export-secret-keys<br></code></pre></td></tr></table></figure><p>打开<code>public-key.txt private-key.txt</code>就能看到公钥和私钥了。</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>如果你要从密钥列表中删除某个密钥，可以使用<code>delete-key</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --delete-key [用户ID]<br></code></pre></td></tr></table></figure><h1 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h1><p><strong>公钥服务器</strong>是网络上专门储存用户公钥的服务器。<code>send-keys</code>参数可以将公钥上传到服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --send-keys [用户ID] --keyserver hkp://subkeys.pgp.net<br></code></pre></td></tr></table></figure><p><strong>由于公钥服务器没有检查机制</strong>，任何人都可以用你的名义上传公钥，所以没有办法保证服务器上的公钥的可靠性。通常，你可以在网站上公布一个公钥指纹，让其他人核对下载到的公钥是否为真。<code>fingerprint</code>参数生成公钥指纹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --fingerprint [用户ID]<br></code></pre></td></tr></table></figure><h1 id="加密体系的建立"><a href="#加密体系的建立" class="headerlink" title="加密体系的建立"></a>加密体系的建立</h1><h2 id="加密文件"><a href="#加密文件" class="headerlink" title="加密文件"></a>加密文件</h2><p>在加密的过程中，<strong>只是对文件进行的加密操作</strong>。例如，我有一个<code>xxx.c</code>文件，这个文件的内容是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>我们可以使用<code>encrypt</code>参数用于加密。我们使用下边的命令对这个文件进行加密。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --recipient UID --output xxx_crypto.c --encrypt xxx.c<br></code></pre></td></tr></table></figure><p>然后我们在<code>xxx.c</code>的同一目录下得到了<code>xxx_crypto.c</code>。我们打开后可以看到<strong>加密后的数据为许多数字与字母</strong>。因为都是进行加密过的文件，<strong>只有进行解密后才能读出数据</strong>。</p><h2 id="解密文件"><a href="#解密文件" class="headerlink" title="解密文件"></a>解密文件</h2><p><code>recipient</code>参数指定接收者的公钥，<code>output</code>参数指定加密后的文件名，<code>encrypt</code>参数指定源文件。运行上面的命令后，<code>xxx_crypto.c</code>，可以把它发给对方。收到文件之后，我们可以使用下边的命令进行解密：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg xxx_crypto.c<br></code></pre></td></tr></table></figure><p>然后根据提示输入密钥就可以完成解密了。解密后的文件就是在最后一步输入的新文件名。</p><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>有时，我们不需要加密文件，只需要对文件签名，表示这个文件确实是我本人发出的。<code>sign</code>参数用来签名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --sign qianming.txt<br></code></pre></td></tr></table></figure><p>然后生成了一个qianming.txt.gpg文件，我们打开这个文件后，发现这也是一个<strong>二进制的数据</strong>，这并<em>不是加密后的数据</em>，与上边的二进制数据不一样。如果想生成ASCII码的签名文件，可以使用<code>clearsign</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --clearsign qianming.txt<br></code></pre></td></tr></table></figure><p>然后生成了一个<code>qianming.txt.asc</code>文件，打开后可以看出生成的签名文件。如果想生成单独的签名文件，与文件内容分开存放，可以使用<code>detach-sign</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --detach-sign qianming.txt<br></code></pre></td></tr></table></figure><p>这也是一个<em>二进制的数据</em>，如果想采用ASCII码形式，要加<code>armor</code>参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --armor --detach-sign qianming.txt<br></code></pre></td></tr></table></figure><h2 id="签名-加密"><a href="#签名-加密" class="headerlink" title="签名+加密"></a>签名+加密</h2><p>上面的参数，都是只签名不加密。如果想同时签名和加密，可以使用下面的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --local-user 发信ID --recipient 收信ID --armor --sign --encrypt qianming.txt<br></code></pre></td></tr></table></figure><p>其中<code>local-user</code>参数指定用发信者的私钥签名，<code>recipient</code>参数指定用接收者的公钥加密，<code>armor</code>参数表示采用ASCII码形式显示，<code>sign</code>参数表示需要签名，<code>encrypt</code>参数表示指定源文件。</p><h2 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h2><p>我们收到别人签名后的文件，需要用对方的公钥验证签名是否为真。<code>verify</code>参数用来验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --verify qianming.txt.asc qianming.txt<br></code></pre></td></tr></table></figure><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>在这个隐私开盲盒的时代，我们唯一能做的就是尽可能的保护自身的安全。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>安全</tag>
      
      <tag>隐私</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
